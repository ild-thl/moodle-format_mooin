{"version":3,"file":"ildhvp4.min.js","sources":["../src/ildhvp4.js"],"sourcesContent":["// Import der AbhÃ¤ngigkeiten\nimport $ from 'jquery';\nimport ajax from 'core/ajax';\nimport notification from 'core/notification';\nimport Str from 'core/str';\nimport Url from 'core/url';\nimport ModalFactory from 'core/modal_factory';\n\n// ILD Namespace Definition\nconst ILD = {};\n\n// Interactions counter\nILD.interactions = [];\n\n// SingleChoiceInteractions counter\nILD.singleChoiceInteractions = [];\n\n// SubContentIds - avoid duplicated answered statement\nILD.subIds = [];\n\n// Stores QuestionSet PassPercentage\nILD.questionSetPassPercentage = [];\n\n// Stores Essay PassPercentage\nILD.EssayPassPercentage = [];\n\n// Stores Branching scenario info\nILD.BranchingScenario = [];\n\n// Stores maxScore of interactions\nILD.maxScore = 0;\n\n// Stores score of interactions\nILD.score = 0;\n\n// Stores percentage of interactions progress\nILD.percentage = 0;\n\n// Internal H5P function listening for xAPI answered events and stores scores\nILD.xAPIAnsweredListener = (event) => {\n  const contentId = event.getVerifiedStatementValue([\n    'object',\n    'definition',\n    'extensions',\n    'http://h5p.org/x-api/h5p-local-content-id',\n  ]);\n  let isInteraction = false;\n\n  if (event.data.statement.object.objectType === 'Activity') {\n    isInteraction = true;\n  }\n\n  if (\n    isInteraction &&\n    event.getVerb() === 'answered' &&\n    typeof ILD.questionSetPassPercentage[contentId] === 'undefined' &&\n    typeof ILD.singleChoiceInteractions[contentId] === 'undefined' &&\n    typeof ILD.EssayPassPercentage[contentId] === 'undefined' &&\n    typeof ILD.BranchingScenario[contentId] === 'undefined'\n  ) {\n    const score = event.getScore();\n    const maxScore = event.getMaxScore();\n    let subContentId = event.data.statement.object.id.split('subContentId=')[1];\n\n    if (ILD.subIds.indexOf(subContentId) !== -1) {\n      if (typeof ILD.interactions[contentId] === 'undefined') {\n        ILD.interactions[contentId] = 1;\n      }\n\n      const interactions = ILD.interactions[contentId];\n      ILD.percentage += (score / maxScore / interactions) * 100;\n      ILD.setResult(contentId, ILD.percentage, 100);\n    } else if (ILD.subIds.indexOf(subContentId) === -1 && ILD.subIds.length === 0) {\n      const percentage = (score / maxScore) * 100;\n      ILD.setResult(contentId, percentage, 100);\n    }\n  }\n\n  // Handle QuestionSet completion\n  if (typeof ILD.questionSetPassPercentage[contentId] !== 'undefined' && event.getVerb() === 'completed') {\n    const score = event.getScore();\n    const maxScore = event.getMaxScore();\n    const percentage = (score / maxScore) * 100;\n    const passPercentage = ILD.questionSetPassPercentage[contentId];\n\n    if (percentage >= passPercentage) {\n      ILD.setResult(contentId, 100, 100);\n    } else {\n      ILD.setResult(contentId, percentage, 100);\n    }\n  }\n\n  // Handle Essay score\n  if (typeof ILD.EssayPassPercentage[contentId] !== 'undefined' && event.getVerb() === 'scored') {\n    const score = event.getScore();\n    const maxScore = event.getMaxScore();\n    const percentage = (score / maxScore) * 100;\n    ILD.setResult(contentId, percentage, 100);\n  }\n\n  // Handle SingleChoiceSet completion\n  if (typeof ILD.singleChoiceInteractions[contentId] !== 'undefined' && event.getVerb() === 'completed') {\n    const score = event.getScore();\n    const maxScore = event.getMaxScore();\n    const percentage = (score / maxScore) * 100;\n    ILD.setResult(contentId, percentage, 100);\n  }\n\n  // Handle BranchingScenario completion\n  if (typeof ILD.BranchingScenario[contentId] !== 'undefined' && event.getVerb() === 'completed') {\n    ILD.setResult(contentId, 100, 100);\n  }\n};\n\n// Post answered results for user and set progress\nILD.setResult = (contentId, score, maxScore) => {\n  window.console.log(score);\n  ILD.reactive.dispatch(\n    \"updateSectionprogress\",\n    ILD.sectionId,\n    contentId,\n    score,\n    maxScore\n  );\n  // ajax.call([\n  //   {\n  //     methodname: 'format_mooin4_setgrade',\n  //     args: { contentid: contentId, score, maxscore: maxScore },\n  //   },\n  // ]);\n};\n\n// Count interactions layers from interactive video element\nILD.getVideoInteractions = (contentId, content) => {\n  const interactions = content.interactiveVideo.assets.interactions;\n  const summaries = content.interactiveVideo.summary.task.params.summaries;\n  const notAllowedInteractions = ['H5P.Text', 'H5P.Table', 'H5P.Link', 'H5P.Image', 'H5P.GoToQuestion', 'H5P.Nil', 'H5P.IVHotspot'];\n\n  let interactionsCounter = 0;\n\n  if (typeof interactions === 'object') {\n    $.each(interactions, (i) => {\n      const library = interactions[i].action.library;\n      const subid = interactions[i].action.subContentId;\n\n      if (!notAllowedInteractions.some((item) => library.includes(item))) {\n        interactionsCounter++;\n        ILD.subIds.push(subid);\n      }\n    });\n\n    ILD.interactions[contentId] = interactionsCounter;\n  }\n\n  if (!interactions || (typeof interactions === 'object' && interactionsCounter === 0)) {\n\n//quick fix\n    /*\n    $('.h5p-iframe')[0].contentWindow.onload = () => {\n      $('.h5p-iframe')[0].contentWindow.H5P.instances[0].video.on('stateChange', (event) => {\n        if (event.data === 0) {\n        */\n    ILD.setResult(contentId, 100, 100);\n\n    //quick fix\n    /*\n  }\n});\n};\n*/\n  }\n\n  if (summaries.length) {\n    let summary = false;\n\n    $.each(summaries, (s) => {\n      if (typeof summaries[s].summary !== 'undefined') {\n        const subId = content.interactiveVideo.summary.task.subContentId;\n        ILD.subIds.push(subId);\n        summary = true;\n      }\n    });\n\n    if (summary) {\n      ILD.interactions[contentId] = interactionsCounter + 1;\n    }\n  }\n};\n\n// Count interactions layers from SingleChoice element\nILD.getSingleChoiceInteractions = (contentId, content) => {\n  const interactions = content.choices;\n\n  $.each(interactions, (s) => {\n    const subid = interactions[s].subContentId;\n    ILD.subIds.push(subid);\n  });\n\n  ILD.singleChoiceInteractions[contentId] = interactions.length;\n};\n\n// Get QuestionSet PassPercentage\nILD.getQuestionSetPercentage = (contentId, content) => {\n  ILD.questionSetPassPercentage[contentId] = content.passPercentage;\n};\n\n// Get Essay PassPercentage\nILD.getEssayPercentage = (contentId, content) => {\n  ILD.EssayPassPercentage[contentId] = content.behaviour.percentagePassing;\n};\n\n// Check if library is InteractiveVideo or QuestionSet\nILD.checkLibrary = (H5PIntegration, H5PInstance) => {\n\n  window.console.log(H5PInstance);\n  const contentId = H5PInstance.contentId;\n\n\n  if (typeof contentId !== 'undefined') {\n    const contentData = H5PIntegration.contents[`cid-${contentId}`];\n    const content = JSON.parse(contentData.jsonContent);\n    const library = contentData.library;\n\n\n    if (library.includes('H5P.InteractiveVideo')) {\n      ILD.getVideoInteractions(contentId, content);\n    } else if (library.includes('H5P.QuestionSet')) {\n      ILD.getQuestionSetPercentage(contentId, content);\n    } else if (library.includes('H5P.SingleChoiceSet')) {\n      ILD.getSingleChoiceInteractions(contentId, content);\n    } else if (library.includes('H5P.Essay')) {\n      ILD.getEssayPercentage(contentId, content);\n    } else if (library.includes('H5P.BranchingScenario')) {\n      ILD.BranchingScenario[contentId] = 1;\n    }\n  }\n};\n\n\nexport default {\n  init(H5PInstance, H5PIntegration, sectionId, reactive) {\n    ILD.sectionId = sectionId;\n    ILD.reactive = reactive;\n    ILD.checkLibrary(H5PIntegration, H5PInstance.instances[0]);\n    H5PInstance.externalDispatcher.on('xAPI', ILD.xAPIAnsweredListener);\n  },\n};"],"names":["ILD","event","contentId","getVerifiedStatementValue","isInteraction","data","statement","object","objectType","getVerb","questionSetPassPercentage","singleChoiceInteractions","EssayPassPercentage","BranchingScenario","score","getScore","maxScore","getMaxScore","subContentId","id","split","subIds","indexOf","interactions","percentage","setResult","length","window","console","log","reactive","dispatch","sectionId","content","interactiveVideo","assets","summaries","summary","task","params","notAllowedInteractions","interactionsCounter","each","i","library","action","subid","some","item","includes","push","s","subId","choices","passPercentage","behaviour","percentagePassing","H5PIntegration","H5PInstance","contentData","contents","JSON","parse","jsonContent","getVideoInteractions","getQuestionSetPercentage","getSingleChoiceInteractions","getEssayPercentage","init","checkLibrary","instances","externalDispatcher","on","xAPIAnsweredListener"],"mappings":"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"}
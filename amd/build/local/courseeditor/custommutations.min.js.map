{"version":3,"file":"custommutations.min.js","sources":["../../../src/local/courseeditor/custommutations.js"],"sourcesContent":["import ajax from 'core/ajax';\n\nexport default class {\n    \n\n    async completeSection(stateManager, target) {\n        const course = stateManager.get('course');\n        let ids = [];\n        ids.push(target.dataset.id);\n        const args = {\n            action: 'complete_section',\n            courseid: course.id,\n            ids: ids,\n            targetsectionid: target.dataset.id,\n        };\n        let updates = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        stateManager.processUpdates(JSON.parse(updates));\n    }\n\n    async updateSectionprogress(stateManager, sectionId, contentid, score, maxscore) {\n\n        await ajax.call([\n            {\n              methodname: \"format_mooin4_setgrade\",\n              args: { contentid: contentid, score: score, maxscore: maxscore },\n            },\n          ])[0];  \n\n\n        const course = stateManager.get('course');\n        let ids = [];\n        ids.push(sectionId);\n        const args = {\n            action: 'update_sectionprogress',\n            courseid: course.id,\n            ids: ids,\n            targetsectionid: sectionId,\n        };\n        let updates = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args\n        }])[0];\n        window.console.log(\"MUTAtION PROGRESS\");\n        stateManager.processUpdates(JSON.parse(updates));\n    }\n\n    async sectionSetChapter(stateManager, target) {\n        const course = stateManager.get('course');\n        let ids = [];\n        const targetSection = stateManager.state.section.get(target.dataset.id);\n        ids.push(target.dataset.id);\n        // stateManager.state.section.forEach(section => {\n        //     if (section.number >= targetSection.number) {\n        //         ids.push(section.id);\n        //     }\n        // });\n        \n        \n        const args = {\n            action: 'section_setChapter',\n            courseid: course.id,\n            ids: ids,\n            targetsectionid: target.dataset.id,\n        };\n        let updates = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        stateManager.processUpdates(JSON.parse(updates));\n        stateManager.setReadOnly(false);\n\n        let lastChapter = stateManager.state.section.get(target.dataset.id);\n        let invisbleCounter = 0\n\n        stateManager.state.section.forEach(section => {\n            if (section.number > targetSection.number) {\n                //statesection = state.section.get(section.id)\n                if (section.isChapter) {\n                    lastChapter = section;  // Das aktuelle Chapter zwischenspeichern\n                    section.isChapter++;\n                    invisbleCounter = 0\n                } else if (section.isChapter == false) {\n                    \n                        section.parentChapter = lastChapter.isChapter;\n                        section.innerChapterNumber = section.number - lastChapter.number - invisbleCounter;\n                        if (section.visible) {\n                            section.prefix = section.parentChapter + \".\" + section.innerChapterNumber;\n                        } else {\n                            invisbleCounter++\n                        }\n                        \n                        \n                    \n                }\n            }\n        });\n        stateManager.setReadOnly(true);\n        \n    }\n    async sectionUnsetChapter(stateManager, target) {\n        const course = stateManager.get('course');\n        let ids = [];\n        const targetSection = stateManager.state.section.get(target.dataset.id);\n        ids.push(target.dataset.id);\n        // const targetSection = stateManager.state.section.get(target.dataset.id);\n        // stateManager.state.section.forEach(section => {\n        //     if (section.number >= targetSection.number) {\n        //         ids.push(section.id);\n        //     }\n        // });\n        \n        const args = {\n            action: 'section_unsetChapter',\n            courseid: course.id,\n            ids: ids,\n            targetsectionid: target.dataset.id,\n        };\n        let updates = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        \n\n        stateManager.setReadOnly(false);\n\n        let lastChapter = stateManager.state.section.get(target.dataset.id);\n        let prevChapter = lastChapter.isChapter -1;\n\n        stateManager.state.section.forEach(section => {\n            window.console.log(prevChapter);\n            window.console.log(section.isChapter);\n            if (section.isChapter == prevChapter) {\n                lastChapter = section;\n            }\n        });\n\n        let invisbleCounter = 0\n\n        stateManager.state.section.forEach(section => {\n            if (section.number > targetSection.number) {\n                //statesection = state.section.get(section.id)\n                if (section.isChapter && section.isChapter != 1) {\n                    lastChapter = section;\n                    section.isChapter--;\n                    invisbleCounter = 0\n                } else if (section.isChapter == false) {\n                    \n                        section.parentChapter = lastChapter.isChapter;\n                        section.innerChapterNumber = section.number - lastChapter.number - invisbleCounter;\n                        if (section.visible) {\n                            section.prefix = section.parentChapter + \".\" + section.innerChapterNumber;\n                        } else {\n                            invisbleCounter++\n                        } \n                }\n            }\n        });\n        stateManager.setReadOnly(true);\n        stateManager.processUpdates(JSON.parse(updates));\n        \n    }\n\n    async setLastSectionModal(stateManager, id) {\n        const course = stateManager.get('course');\n        let ids = [];\n        ids.push(id);\n        const args = {\n            action: 'set_last_section_modal',\n            courseid: course.id,\n            ids: ids,\n            targetsectionid: id,\n        };\n        let updates = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        stateManager.processUpdates(JSON.parse(updates));\n    }\n\n    setContinueSection(stateManager, type, id) {\n        stateManager.setReadOnly(false);\n        const state = stateManager.state;\n        const course = state.course;\n        course.continueSection = id;\n        state.section.forEach((section) => {\n            //section.containsActiveSection = false;\n            //section.isActiveSection = false;\n            if (section.id == id) {\n                section.isActiveSection = true;\n            }\n            \n            if (section.parentChapter == state.section.get(id).parentChapter) {\n                section.containsActiveSection = true;\n                \n            }\n        });\n        state.section.get(id).isActiveSection = true;\n        \n        stateManager.setReadOnly(true);\n    }\n\n    async getContinueSection(stateManager, target) {\n        const state = stateManager.state;\n        const course = state.course;\n        const args = {\n            action: 'getContinuesection',\n            courseid: course.id,\n        };\n        let updates = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        stateManager.processUpdates(JSON.parse(updates));\n    }\n\n    async readAllForumDiscussions(stateManager, forumid) {\n        const state = stateManager.state;\n        const course = state.course;\n        let ids = [];\n        ids.push(forumid);\n        const args = {\n            action: 'readAllForumDiscussions',\n            courseid: course.id,\n            ids: ids,\n        }\n        let updates = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        stateManager.processUpdates(JSON.parse(updates));\n    }\n\n    async reloadAllSectionPrefixes(stateManager, target) {\n        const state = stateManager.state;\n        const course = state.course;\n        let ids = [];\n        stateManager.state.section.forEach(section => {\n            // if (section.number >= target.number) {\n                ids.push(section.id);\n            // }\n        });\n        //ids.push(target); \n        const args = {\n            action: 'reload_all_section_prefixes',\n            courseid: course.id,\n            ids: ids,\n        }\n        let updates = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        stateManager.processUpdates(JSON.parse(updates));\n    }\n}"],"names":["stateManager","target","course","get","ids","push","dataset","id","args","action","courseid","targetsectionid","updates","ajax","call","methodname","processUpdates","JSON","parse","sectionId","contentid","score","maxscore","window","console","log","targetSection","state","section","setReadOnly","lastChapter","invisbleCounter","forEach","number","isChapter","parentChapter","innerChapterNumber","visible","prefix","prevChapter","setContinueSection","type","continueSection","isActiveSection","containsActiveSection","forumid"],"mappings":"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"}
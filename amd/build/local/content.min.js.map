{"version":3,"file":"content.min.js","sources":["../../src/local/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     core_courseformat/local/content\n * @class      core_courseformat/local/content\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport { BaseComponent } from \"core/reactive\";\nimport { debounce } from \"core/utils\";\nimport { getCurrentCourseEditor } from \"core_courseformat/courseeditor\";\nimport inplaceeditable from \"core/inplace_editable\";\nimport Section from \"format_mooin4/local/content/section\";\nimport CmItem from \"format_mooin4/local/content/section/cmitem\";\n// Course actions is needed for actions that are not migrated to components.\nimport courseActions from \"core_course/actions\";\nimport DispatchActions from \"format_mooin4/local/content/actions\";\nimport * as CourseEvents from \"core_course/events\";\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\nimport jQuery from \"jquery\";\nimport Pending from \"core/pending\";\nimport log from \"core/log\";\nimport { get_string as getString } from \"core/str\";\nimport ModalFactory from \"core/modal_factory\";\nimport Templates from \"core/templates\";\nimport ModalEvents from \"core/modal_events\";\nimport Mooin4Modal from \"../mooin4modal\";\n\nimport CustomMutations from \"format_mooin4/local/courseeditor/custommutations\";\n\nexport default class Component extends BaseComponent {\n  /**\n   * Constructor hook.\n   *\n   * @param {Object} descriptor the component descriptor\n   */\n  create(descriptor) {\n    // Optional component name for debugging.\n    this.name = \"course_format\";\n    // Default query selectors.\n    this.selectors = {\n      SECTION: `[data-for='section']`,\n      SECTION_ITEM: `[data-for='section_title']`,\n      SECTION_CMLIST: `[data-for='cmlist']`,\n      COURSE_SECTIONLIST: `[data-for='course_sectionlist']`,\n      CM: `[data-for='cmitem']`,\n      PAGE: `#page`,\n      TOGGLER: `[data-action=\"togglecoursecontentsection\"]`,\n      COLLAPSE: `[data-toggle=\"collapse\"]`,\n      TOGGLEALL: `[data-toggle=\"toggleall\"]`,\n      // Formats can override the activity tag but a default one is needed to create new elements.\n      ACTIVITYTAG: \"li\",\n      SECTIONTAG: \"li\",\n      INDEXNUMBER: `[data-for='index_number']`,\n      NAVIGATIONWRAPPER: `[data-for='navigation_wrapper']`,\n      NAVIGATIONTITLE: `[data-for='navigationtitle']`,\n      BREADCRUMB: `[data-for='breadcrumb']`,\n      PROGRESSBAR: `[data-for='progressbar_container']`,\n      PROGRESSBARINNER: `[data-for='progressbar_inner']`,\n      COMPLETIONBUTTON: `[data-for='complete-section']`,\n      SECTIONPROGRESS: `[data-for='section-progress']`,\n      TITLEOVERLAY: `[data-for='title-overlay']`,\n      //H5P: `.parent-iframe`,\n    };\n    // Default classes to toggle on refresh.\n    this.classes = {\n      COLLAPSED: `collapsed`,\n      // Course content classes.\n      ACTIVITY: `activity`,\n      STATEDREADY: `stateready`,\n      SECTION: `section`,\n      SCROLLUP: `scroll-up`,\n      SCROLLDOWN: `scroll-down`,\n      FADEOUT: `fade-out`,\n      ACTIVE: `active`,\n    };\n    // Array to save dettached elements during element resorting.\n    this.dettachedCms = {};\n    this.dettachedSections = {};\n    // Index of sections and cms components.\n    this.sections = {};\n    this.cms = {};\n    // The page section return.\n    this.sectionReturn = descriptor.sectionReturn ?? 0;\n    this.debouncedReloads = new Map();\n\n    //Last Scrollposition\n    this.lastScroll = 0;\n  }\n\n  /**\n   * Static method to create a component instance form the mustahce template.\n   *\n   * @param {string} target the DOM main element or its ID\n   * @param {object} selectors optional css selector overrides\n   * @param {number} sectionReturn the content section return\n   * @return {Component}\n   */\n  static init(target, selectors, sectionReturn) {\n    return new Component({\n      element: document.getElementById(target),\n      reactive: getCurrentCourseEditor(),\n      selectors,\n      sectionReturn,\n    });\n  }\n\n  /**\n   * Initial state ready method.\n   *\n   * @param {Object} state the state data\n   */\n  stateReady(state) {\n    this._indexContents();\n    // Activate section togglers.\n    this.addEventListener(this.element, \"click\", this._sectionTogglers);\n\n    // Collapse/Expand all sections button.\n    const toogleAll = this.getElement(this.selectors.TOGGLEALL);\n    if (toogleAll) {\n      // Ensure collapse menu button adds aria-controls attribute referring to each collapsible element.\n      const collapseElements = this.getElements(this.selectors.COLLAPSE);\n      const collapseElementIds = [...collapseElements].map(\n        (element) => element.id\n      );\n      toogleAll.setAttribute(\"aria-controls\", collapseElementIds.join(\" \"));\n\n      this.addEventListener(toogleAll, \"click\", this._allSectionToggler);\n      this.addEventListener(toogleAll, \"keydown\", (e) => {\n        // Collapse/expand all sections when Space key is pressed on the toggle button.\n        if (e.key === \" \") {\n          this._allSectionToggler(e);\n        }\n      });\n      this._refreshAllSectionsToggler(state);\n    }\n\n    if (this.reactive.supportComponents) {\n      DispatchActions.addActions({\n        completeSection: \"completeSection\",\n      });\n      const mutations = new CustomMutations();\n      // Actions are only available in edit mode.\n      if (this.reactive.isEditing) {\n        DispatchActions.addActions({\n          sectionSetChapter: \"sectionSetChapter\",\n          sectionUnsetChapter: \"sectionUnsetChapter\",\n        });\n\n        this.reactive.addMutations({\n          sectionSetChapter: mutations.sectionSetChapter,\n          sectionUnsetChapter: mutations.sectionUnsetChapter,\n          //completeSection: mutations.completeSection,\n        });\n      }\n      new DispatchActions(this);\n      this.reactive.addMutations({\n        completeSection: mutations.completeSection,\n        setContinueSection: mutations.setContinueSection,\n        getContinueSection: mutations.getContinueSection,\n        updateSectionprogress: mutations.updateSectionprogress,\n        setLastSectionModal: mutations.setLastSectionModal,\n        reloadAllSectionPrefixes: mutations.reloadAllSectionPrefixes,\n      });\n\n      // Mark content as state ready.\n      this.element.classList.add(this.classes.STATEDREADY);\n      this.reactive.dispatch(\"getContinueSection\", \"section\");\n      const sections = this.getElements(this.selectors.SECTION);\n      sections.forEach((section) => {\n        if (section.classList.contains(this.classes.ACTIVE)) {\n          this.reactive.dispatch(\n            \"setContinueSection\",\n            \"section\",\n            section.dataset.id\n          );\n        }\n      });\n    }\n\n    // Capture completion events.\n    this.addEventListener(\n      this.element,\n      CourseEvents.manualCompletionToggled,\n      this._completionHandler\n    );\n\n    // Capture page scroll to update page item.\n    this.addEventListener(\n      document.querySelector(this.selectors.PAGE),\n      \"scroll\",\n      this._scrollHandler\n    );\n    //this._showLastSectionModal(state);\n    //this._hvpListener();\n  }\n\n  /**\n   * Setup sections toggler.\n   *\n   * Toggler click is delegated to the main course content element because new sections can\n   * appear at any moment and this way we prevent accidental double bindings.\n   *\n   * @param {Event} event the triggered event\n   */\n  _sectionTogglers(event) {\n    const sectionlink = event.target.closest(this.selectors.TOGGLER);\n    const closestCollapse = event.target.closest(this.selectors.COLLAPSE);\n    // Assume that chevron is the only collapse toggler in a section heading;\n    // I think this is the most efficient way to verify at the moment.\n    const isChevron = closestCollapse?.closest(this.selectors.SECTION_ITEM);\n\n    if (sectionlink || isChevron) {\n      const section = event.target.closest(this.selectors.SECTION);\n      const toggler = section.querySelector(this.selectors.COLLAPSE);\n      const isCollapsed =\n        toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n      if (isChevron || isCollapsed) {\n        // Update the state.\n        const sectionId = section.getAttribute(\"data-id\");\n        this.reactive.dispatch(\n          \"sectionContentCollapsed\",\n          [sectionId],\n          !isCollapsed\n        );\n      }\n    }\n  }\n\n  /**\n   * Handle the collapse/expand all sections button.\n   *\n   * Toggler click is delegated to the main course content element because new sections can\n   * appear at any moment and this way we prevent accidental double bindings.\n   *\n   * @param {Event} event the triggered event\n   */\n  _allSectionToggler(event) {\n    event.preventDefault();\n\n    const target = event.target.closest(this.selectors.TOGGLEALL);\n    const isAllCollapsed = target.classList.contains(this.classes.COLLAPSED);\n\n    const course = this.reactive.get(\"course\");\n    this.reactive.dispatch(\n      \"sectionContentCollapsed\",\n      course.sectionlist ?? [],\n      !isAllCollapsed\n    );\n  }\n\n  /**\n   * Return the component watchers.\n   *\n   * @returns {Array} of watchers\n   */\n  getWatchers() {\n    // Section return is a global page variable but most formats define it just before start printing\n    // the course content. This is the reason why we define this page setting here.\n    this.reactive.sectionReturn = this.sectionReturn;\n\n    // Check if the course format is compatible with reactive components.\n    if (!this.reactive.supportComponents) {\n      return [];\n    }\n    return [\n      // State changes that require to reload some course modules.\n      { watch: `cm.visible:updated`, handler: this._reloadCm },\n      { watch: `cm.stealth:updated`, handler: this._reloadCm },\n      { watch: `cm.indent:updated`, handler: this._reloadCm },\n      // Update section number and title.\n      { watch: `section.number:updated`, handler: this._refreshSectionNumber },\n      // Collapse and expand sections.\n      {\n        watch: `section.contentcollapsed:updated`,\n        handler: this._refreshSectionCollapsed,\n      },\n      // Sections and cm sorting.\n      { watch: `transaction:start`, handler: this._startProcessing },\n      {\n        watch: `course.sectionlist:updated`,\n        handler: this._refreshCourseSectionlist,\n      },\n      { watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist },\n      // Section visibility.\n      { watch: `section.visible:updated`, handler: this._reloadSection },\n      {\n        watch: `section.isChapter:updated`,\n        handler: this._updateChapters,\n      },\n      // Reindex sections and cms.\n      { watch: `state:updated`, handler: this._indexContents },\n      // State changes thaty require to reload course modules.\n      { watch: `cm.visible:updated`, handler: this._reloadCm },\n      { watch: `cm.sectionid:updated`, handler: this._reloadCm },\n      {\n        watch: `section.sectionprogress:updated`,\n        handler: this._updateSectionProgress,\n      },\n    ];\n  }\n\n  /**\n   * Update section collapsed state via bootstrap 4 if necessary.\n   *\n   * Formats that do not use bootstrap 4 must override this method in order to keep the section\n   * toggling working.\n   *\n   * @param {object} args\n   * @param {Object} args.state The state data\n   * @param {Object} args.element The element to update\n   */\n  _refreshSectionCollapsed({ state, element }) {\n    const target = this.getElement(this.selectors.SECTION, element.id);\n    if (!target) {\n      throw new Error(`Unknown section with ID ${element.id}`);\n    }\n    // Check if it is already done.\n    const toggler = target.querySelector(this.selectors.COLLAPSE);\n    const isCollapsed =\n      toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n    if (element.contentcollapsed !== isCollapsed) {\n      let collapsibleId =\n        toggler.dataset.target ?? toggler.getAttribute(\"href\");\n      if (!collapsibleId) {\n        return;\n      }\n      collapsibleId = collapsibleId.replace(\"#\", \"\");\n      const collapsible = document.getElementById(collapsibleId);\n      if (!collapsible) {\n        return;\n      }\n\n      // Course index is based on Bootstrap 4 collapsibles. To collapse them we need jQuery to\n      // interact with collapsibles methods. Hopefully, this will change in Bootstrap 5 because\n      // it does not require jQuery anymore (when MDL-71979 is integrated).\n      jQuery(collapsible).collapse(element.contentcollapsed ? \"hide\" : \"show\");\n    }\n\n    this._refreshAllSectionsToggler(state);\n  }\n\n  /**\n   * Refresh the collapse/expand all sections element.\n   *\n   * @param {Object} state The state data\n   */\n  _refreshAllSectionsToggler(state) {\n    const target = this.getElement(this.selectors.TOGGLEALL);\n    if (!target) {\n      return;\n    }\n    // Check if we have all sections collapsed/expanded.\n    let allcollapsed = true;\n    let allexpanded = true;\n    state.section.forEach((section) => {\n      allcollapsed = allcollapsed && section.contentcollapsed;\n      allexpanded = allexpanded && !section.contentcollapsed;\n    });\n    if (allcollapsed) {\n      target.classList.add(this.classes.COLLAPSED);\n      target.setAttribute(\"aria-expanded\", false);\n    }\n    if (allexpanded) {\n      target.classList.remove(this.classes.COLLAPSED);\n      target.setAttribute(\"aria-expanded\", true);\n    }\n  }\n\n  /**\n   * Setup the component to start a transaction.\n   *\n   * Some of the course actions replaces the current DOM element with a new one before updating the\n   * course state. This means the component cannot preload any index properly until the transaction starts.\n   *\n   */\n  _startProcessing() {\n    // During a section or cm sorting, some elements could be dettached from the DOM and we\n    // need to store somewhare in case they are needed later.\n    this.dettachedCms = {};\n    this.dettachedSections = {};\n  }\n\n  /**\n   * Activity manual completion listener.\n   *\n   * @param {Event} event the custom ecent\n   */\n  _completionHandler({ detail }) {\n    if (detail === undefined) {\n      return;\n    }\n    this.reactive.dispatch(\"cmCompletion\", [detail.cmid], detail.completed);\n  }\n\n  /**\n   * Check the current page scroll and update the active element if necessary.\n   */\n  _scrollHandler() {\n    const pageOffset = document.querySelector(this.selectors.PAGE).scrollTop;\n    this._titleoverlay(pageOffset);\n    if (!this.reactive.isEditing) {\n      this._dynamicHeader(pageOffset);\n    }\n\n    // const items = this.reactive\n    //   .getExporter()\n    //   .allItemsArray(this.reactive.state);\n    // // Check what is the active element now.\n    // let pageItem = null;\n    // items.every((item) => {\n    //   const index = item.type === \"section\" ? this.sections : this.cms;\n    //   if (index[item.id] === undefined) {\n    //     return true;\n    //   }\n\n    //   const element = index[item.id].element;\n    //   // Activities without url can only be page items in edit mode.\n    //   if (item.type === \"cm\" && !item.url && !this.reactive.isEditing) {\n    //     return pageOffset >= element.offsetTop;\n    //   }\n\n    //   pageItem = item;\n\n    //   return pageOffset >= element.offsetTop;\n    // });\n    // if (pageItem) {\n    //   //this.reactive.dispatch('setPageItem', pageItem.type, pageItem.id);\n    // }\n  }\n\n  _dynamicHeader(pageOffset) {\n    const navigationHeader = this.getElement(this.selectors.NAVIGATIONWRAPPER);\n    const title = this.getElement(this.selectors.NAVIGATIONTITLE);\n    const progressbarContainer = this.getElement(this.selectors.PROGRESSBAR);\n    const breadcrumb = this.getElement(this.selectors.BREADCRUMB);\n    if (title) {\n      var titleHeight = title.offsetHeight;\n      var progressbarContainerHeight = progressbarContainer.offsetHeight;\n      var removeOffset;\n      var screenHeight = window.innerHeight;\n\n      if (screenHeight <= 600) {\n        removeOffset = titleHeight + progressbarContainerHeight + 20;\n      } else {\n        removeOffset = titleHeight + 20;\n      }\n\n      if (pageOffset <= 0) {\n        navigationHeader.classList.remove(this.classes.SCROLLUP);\n        return;\n      }\n\n      if (\n        pageOffset > this.lastScroll &&\n        !navigationHeader.classList.contains(this.classes.SCROLLDOWN)\n      ) {\n        // down\n        navigationHeader.classList.remove(this.classes.SCROLLUP);\n        navigationHeader.classList.add(this.classes.SCROLLDOWN);\n        navigationHeader.style.transform =\n          \"translateY(-\" + removeOffset + \"px)\";\n        breadcrumb.style.transform = \"translateY(\" + removeOffset + \"px)\";\n        title.style.transform = \"translateY(\" + removeOffset + \"px)\";\n        //progressbarContainer.style.transform = \"translateY(\" + removeOffset + \"px)\";\n      } else if (\n        pageOffset < this.lastScroll &&\n        navigationHeader.classList.contains(this.classes.SCROLLDOWN)\n      ) {\n        // up\n        navigationHeader.classList.remove(this.classes.SCROLLDOWN);\n        navigationHeader.classList.add(this.classes.SCROLLUP);\n        navigationHeader.style.transform = \"translateY(0px)\";\n        breadcrumb.style.transform = \"translateY(0px)\";\n        title.style.transform = \"translateY(0px)\";\n        progressbarContainer.style.transform = \"translateY(0px)\";\n      }\n      this.lastScroll = pageOffset;\n    }\n  }\n\n  _titleoverlay(pageOffset) {\n    const titleOverlay = this.getElement(this.selectors.TITLEOVERLAY);\n    if (titleOverlay) {\n      if (pageOffset > 130) {\n        titleOverlay.classList.add(this.classes.FADEOUT);\n      } else {\n        titleOverlay.classList.remove(this.classes.FADEOUT);\n      }\n    }\n  }\n\n  /**\n   * Update a course section when the section number changes.\n   *\n   * The courseActions module used for most course section tools still depends on css classes and\n   * section numbers (not id). To prevent inconsistencies when a section is moved, we need to refresh\n   * the\n   *\n   * Course formats can override the section title rendering so the frontend depends heavily on backend\n   * rendering. Luckily in edit mode we can trigger a title update using the inplace_editable module.\n   *\n   *\n   * @param {Object} state\n   * @param {Object} param.element details the update details.\n   */\n  _refreshSectionNumber({ state, element }) {\n    // Find the element.\n    const target = this.getElement(this.selectors.SECTION, element.id);\n    if (!target) {\n      // Job done. Nothing to refresh.\n      return;\n    }\n    // Update section numbers in all data, css and YUI attributes.\n    target.id = `section-${element.number}`;\n    // YUI uses section number as section id in data-sectionid, in principle if a format use components\n    // don't need this sectionid attribute anymore, but we keep the compatibility in case some plugin\n    // use it for legacy purposes.\n    target.dataset.sectionid = element.number;\n    // The data-number is the attribute used by components to store the section number.\n    target.dataset.number = element.number;\n    \n    //this._reloadSectionNames({ state: state, element: element });\n \n    \n    // Update title and title inplace editable, if any.\n    const inplace = inplaceeditable.getInplaceEditable(\n      target.querySelector(this.selectors.SECTION_ITEM)\n    );\n    if (inplace) {\n      // The course content HTML can be modified at any moment, so the function need to do some checkings\n      // to make sure the inplace editable still represents the same itemid.\n      const currentvalue = inplace.getValue();\n      const currentitemid = inplace.getItemId();\n      // Unnamed sections must be recalculated.\n      if (inplace.getValue() === \"\") {\n        // The value to send can be an empty value if it is a default name.\n        if (\n          currentitemid == element.id &&\n          (currentvalue != element.rawtitle || element.rawtitle == \"\")\n        ) {\n          inplace.setValue(element.rawtitle);\n        }\n      }\n    }\n  }\n\n  /**\n   * Refresh a section cm list.\n   *\n   * @param {Object} param\n   * @param {Object} param.element details the update details.\n   */\n  _refreshSectionCmlist({ element }) {\n    const cmlist = element.cmlist ?? [];\n    const section = this.getElement(this.selectors.SECTION, element.id);\n    const listparent = section?.querySelector(this.selectors.SECTION_CMLIST);\n    // A method to create a fake element to be replaced when the item is ready.\n    const createCm = this._createCmItem.bind(this);\n    if (listparent) {\n      this._fixOrder(\n        listparent,\n        cmlist,\n        this.selectors.CM,\n        this.dettachedCms,\n        createCm\n      );\n    }\n  }\n\n  /**\n   * Refresh the section list.\n   *\n   * @param {Object} param\n   * @param {Object} param.element details the update details.\n   */\n  _refreshCourseSectionlist({ element }) {\n    // If we have a section return means we only show a single section so no need to fix order.\n    if (this.reactive.sectionReturn != 0) {\n      return;\n    }\n    const sectionlist = element.sectionlist ?? [];\n    const listparent = this.getElement(this.selectors.COURSE_SECTIONLIST);\n    // For now section cannot be created at a frontend level.\n    const createSection = this._createSectionItem.bind(this);\n    if (listparent) {\n      this._fixOrder(\n        listparent,\n        sectionlist,\n        this.selectors.SECTION,\n        this.dettachedSections,\n        createSection\n      );\n    }\n  }\n\n  /**\n   * Regenerate content indexes.\n   *\n   * This method is used when a legacy action refresh some content element.\n   */\n  _indexContents() {\n    // Find unindexed sections.\n    this._scanIndex(this.selectors.SECTION, this.sections, (item) => {\n      return new Section(item);\n    });\n\n    // Find unindexed cms.\n    this._scanIndex(this.selectors.CM, this.cms, (item) => {\n      return new CmItem(item);\n    });\n  }\n\n  /**\n   * Reindex a content (section or cm) of the course content.\n   *\n   * This method is used internally by _indexContents.\n   *\n   * @param {string} selector the DOM selector to scan\n   * @param {*} index the index attribute to update\n   * @param {*} creationhandler method to create a new indexed element\n   */\n  _scanIndex(selector, index, creationhandler) {\n    const items = this.getElements(`${selector}:not([data-indexed])`);\n    items.forEach((item) => {\n      if (!item?.dataset?.id) {\n        return;\n      }\n      // Delete previous item component.\n      if (index[item.dataset.id] !== undefined) {\n        index[item.dataset.id].unregister();\n      }\n      // Create the new component.\n      index[item.dataset.id] = creationhandler({\n        ...this,\n        element: item,\n      });\n      // Mark as indexed.\n      item.dataset.indexed = true;\n    });\n  }\n\n  /**\n   * Reload a course module contents.\n   *\n   * Most course module HTML is still strongly backend dependant.\n   * Some changes require to get a new version of the module.\n   *\n   * @param {object} param0 the watcher details\n   * @param {object} param0.element the state object\n   */\n  _reloadCm({ element }) {\n    if (!this.getElement(this.selectors.CM, element.id)) {\n      return;\n    }\n    const debouncedReload = this._getDebouncedReloadCm(element.id);\n    debouncedReload();\n  }\n\n  /**\n   * Generate or get a reload CM debounced function.\n   * @param {Number} cmId\n   * @returns {Function} the debounced reload function\n   */\n  _getDebouncedReloadCm(cmId) {\n    const pendingKey = `courseformat/content:reloadCm_${cmId}`;\n    let debouncedReload = this.debouncedReloads.get(pendingKey);\n    if (debouncedReload) {\n      return debouncedReload;\n    }\n    const reload = () => {\n      const pendingReload = new Pending(pendingKey);\n      this.debouncedReloads.delete(pendingKey);\n      const cmitem = this.getElement(this.selectors.CM, cmId);\n      if (!cmitem) {\n        return pendingReload.resolve();\n      }\n      const promise = courseActions.refreshModule(cmitem, cmId);\n      promise\n        .then(() => {\n          this._indexContents();\n          return true;\n        })\n        .catch((error) => {\n          log.debug(error);\n        })\n        .finally(() => {\n          pendingReload.resolve();\n        });\n      return pendingReload;\n    };\n    debouncedReload = debounce(reload, 200, {\n      cancel: true,\n      pending: true,\n    });\n    this.debouncedReloads.set(pendingKey, debouncedReload);\n    return debouncedReload;\n  }\n\n  /**\n   * Cancel the active reload CM debounced function, if any.\n   * @param {Number} cmId\n   */\n  _cancelDebouncedReloadCm(cmId) {\n    const pendingKey = `courseformat/content:reloadCm_${cmId}`;\n    const debouncedReload = this.debouncedReloads.get(pendingKey);\n    if (!debouncedReload) {\n      return;\n    }\n    debouncedReload.cancel();\n    this.debouncedReloads.delete(pendingKey);\n  }\n\n  /**\n   * Reload a course section contents.\n   *\n   * Section HTML is still strongly backend dependant.\n   * Some changes require to get a new version of the section.\n   *\n   * @param {details} param0 the watcher details\n   * @param {object} param0.element the state object\n   */\n  _reloadSection({ state, element }) {\n    const pendingReload = new Pending(\n      `courseformat/content:reloadSection_${element.id}`\n    );\n    const sectionitem = this.getElement(this.selectors.SECTION, element.id);\n    if (sectionitem) {\n      // Cancel any pending reload because the section will reload cms too.\n      for (const cmId of element.cmlist) {\n        this._cancelDebouncedReloadCm(cmId);\n      }\n      this.reactive.dispatch('reloadAllSectionPrefixes', element);\n      const promise = courseActions.refreshSection(sectionitem, element.id);\n      \n      promise\n        .then(() => {\n          this._indexContents();\n          this._reloadSectionNames({ state: state, element: element });\n          return true;\n        })\n        .catch((error) => {\n          log.debug(error);\n        })\n        .finally(() => {\n          pendingReload.resolve();\n          \n        });\n    }\n  }\n\n  _reloadSectionNames({ state, element }) {\n    state.section.forEach((section) => {\n      if (section.number >= element.number) {\n        const number = this.getElement(this.selectors.INDEXNUMBER, section.id);\n        if (section.isChapter) {\n          number.innerHTML = section.isChapter;\n        } else {\n          // if (!section.visible) {\n          //   number.innerHTML = \"ausgeblendet\"\n          // } else {\n          //   //this.reactive.dispatch('reloadAllSectionPrefixes', element);\n          //   number.innerHTML = state.section.get(section.id).prefix;\n          // }\n          number.innerHTML = state.section.get(section.id).prefix;\n            //section.parentChapter + \".\" + section.innerChapterNumber;\n        }\n      }\n    });\n  }\n\n  _updateChapters({ state, element }) {\n    //this.reactive.dispatch('reloadAllSectionPrefixes', element);\n    //this._reloadSection({ element });\n    window.console.log(\"chapter updated\");\n    this._reloadSection({\n            state: state, element: element,\n          });\n    // state.section.forEach((section) => {\n    //   if (section.number >= element.number) {\n    //     this._reloadSection({\n    //       element: section,\n    //     });\n        // const number = this.getElement(this.selectors.INDEXNUMBER, section.id);\n        // if (section.isChapter) {\n        //   number.innerHTML = section.isChapter;\n        // } else {\n        //   number.innerHTML =\n        //     section.parentChapter + \".\" + section.innerChapterNumber;\n        // }\n        //window.console.log(number);\n     // }\n    //});\n  }\n\n  //_reloadSectionNames({state, element}) {\n  // this._reloadSection({element});\n  // state.section.forEach(section => {\n  //   if (section.number > element.number) {\n  //     this._reloadSection({element: section});\n  //   }\n  // });\n  // const elements = this.getElements(this.selectors.INDEXNUMBER);\n  // elements.forEach(element => {\n  //   element.innerHTML = \"&nbsp3000:&nbsp\";\n  // });\n  //}\n\n  /**\n   * Create a new course module item in a section.\n   *\n   * Thos method will append a fake item in the container and trigger an ajax request to\n   * replace the fake element by the real content.\n   *\n   * @param {Element} container the container element (section)\n   * @param {Number} cmid the course-module ID\n   * @returns {Element} the created element\n   */\n  _createCmItem(container, cmid) {\n    const newItem = document.createElement(this.selectors.ACTIVITYTAG);\n    newItem.dataset.for = \"cmitem\";\n    newItem.dataset.id = cmid;\n    // The legacy actions.js requires a specific ID and class to refresh the CM.\n    newItem.id = `module-${cmid}`;\n    newItem.classList.add(this.classes.ACTIVITY);\n    container.append(newItem);\n    this._reloadCm({\n      element: this.reactive.get(\"cm\", cmid),\n    });\n    return newItem;\n  }\n\n  /**\n   * Create a new section item.\n   *\n   * This method will append a fake item in the container and trigger an ajax request to\n   * replace the fake element by the real content.\n   *\n   * @param {Element} container the container element (section)\n   * @param {Number} sectionid the course-module ID\n   * @returns {Element} the created element\n   */\n  _createSectionItem(container, sectionid) {\n    const section = this.reactive.get(\"section\", sectionid);\n    const newItem = document.createElement(this.selectors.SECTIONTAG);\n    newItem.dataset.for = \"section\";\n    newItem.dataset.id = sectionid;\n    newItem.dataset.number = section.number;\n    // The legacy actions.js requires a specific ID and class to refresh the section.\n    newItem.id = `section-${sectionid}`;\n    newItem.classList.add(this.classes.SECTION);\n    container.append(newItem);\n    this._reloadSection({\n      element: section,\n    });\n    return newItem;\n  }\n\n  /**\n   * Fix/reorder the section or cms order.\n   *\n   * @param {Element} container the HTML element to reorder.\n   * @param {Array} neworder an array with the ids order\n   * @param {string} selector the element selector\n   * @param {Object} dettachedelements a list of dettached elements\n   * @param {function} createMethod method to create missing elements\n   */\n  async _fixOrder(\n    container,\n    neworder,\n    selector,\n    dettachedelements,\n    createMethod\n  ) {\n    if (container === undefined) {\n      return;\n    }\n\n    // Empty lists should not be visible.\n    if (!neworder.length) {\n      container.classList.add(\"hidden\");\n      container.innerHTML = \"\";\n      return;\n    }\n\n    // Grant the list is visible (in case it was empty).\n    container.classList.remove(\"hidden\");\n\n    // Move the elements in order at the beginning of the list.\n    neworder.forEach((itemid, index) => {\n      let item =\n        this.getElement(selector, itemid) ??\n        dettachedelements[itemid] ??\n        createMethod(container, itemid);\n      if (item === undefined) {\n        // Missing elements cannot be sorted.\n        return;\n      }\n      // Get the current elemnt at that position.\n      const currentitem = container.children[index];\n      if (currentitem === undefined) {\n        container.append(item);\n        return;\n      }\n      if (currentitem !== item) {\n        container.insertBefore(item, currentitem);\n      }\n    });\n\n    // Dndupload add a fake element we need to keep.\n    let dndFakeActivity;\n\n    // Remove the remaining elements.\n    while (container.children.length > neworder.length) {\n      const lastchild = container.lastChild;\n      if (lastchild?.classList?.contains(\"dndupload-preview\")) {\n        dndFakeActivity = lastchild;\n      } else {\n        dettachedelements[lastchild?.dataset?.id ?? 0] = lastchild;\n      }\n      container.removeChild(lastchild);\n    }\n    // Restore dndupload fake element.\n    if (dndFakeActivity) {\n      container.append(dndFakeActivity);\n    }\n  }\n\n  async _updateSectionProgress({ state, element }) {\n    const progressbar = this.getElement(this.selectors.PROGRESSBARINNER);\n    progressbar.style.width = element.sectionprogress + \"%\";\n\n    const sectionprogress = this.getElement(this.selectors.SECTIONPROGRESS);\n    sectionprogress.innerText = element.sectionprogress;\n\n    const completionbutton = this.getElement(this.selectors.COMPLETIONBUTTON);\n    if (completionbutton) {\n      completionbutton.disabled = true;\n\n      const text = await getString(\"page_read\", \"format_mooin4\");\n      const checkMark = document.createElement(\"i\");\n      checkMark.classList.add(\"bi\", \"bi-check\");\n      completionbutton.innerText = text;\n      completionbutton.appendChild(checkMark);\n    }\n\n    const currentSection = state.section.get(element.id);\n    let nextSection = null;\n\n    let completed = true;\n    let allCompleted = true;\n\n    state.section.forEach((section) => {\n      if (!section.isCompleted && section.number != 0 && !section.isChapter) {\n        allCompleted = false;\n      }\n    });\n\n    state.section.forEach((section) => {\n      if (\n        section.parentChapter === currentSection.parentChapter &&\n        !section.isCompleted\n      ) {\n        completed = false;\n      }\n      if (\n        Number(section.parentChapter) ===\n          Number(currentSection.parentChapter) + 1 &&\n        section.isFirstSectionOfChapter\n      ) {\n        nextSection = section;\n      }\n    });\n\n    if (allCompleted) {\n      this._showCourseCompletedModal(state, nextSection);\n    } else if (completed) {\n      this._showChapterCompletedModal(state, nextSection);\n    }\n  }\n\n  async _showChapterCompletedModal(state, nextSection) {\n    const modal = await ModalFactory.create({\n      type: Mooin4Modal.TYPE,\n      title: await getString(\n        \"modal_chapter_complete_title\",\n        \"format_mooin4\"\n      ),\n      body: Templates.render(\n        \"format_mooin4/local/content/modals/chaptercomplete\",\n        {}\n      ),\n      footer: Templates.render(\n        \"format_mooin4/local/content/modals/completechapterfooter\",\n        { nextSection }\n      ),\n      scrollable: false,\n    });\n    modal.show();\n    modal.showFooter();\n  }\n\n  async _showCourseCompletedModal(state) {\n    const modal = await ModalFactory.create({\n      type: Mooin4Modal.TYPE,\n      title: await getString(\n        \"modal_course_complete_title\",\n        \"format_mooin4\"\n      ),\n      body: Templates.render(\n        \"format_mooin4/local/content/modals/coursecomplete\",\n        {}\n      ),\n      footer: Templates.render(\n        \"format_mooin4/local/content/modals/modalfooterclose\",\n        {}\n      ),\n      scrollable: false,\n    });\n    modal.show();\n    modal.showFooter();\n  }\n\n  // _hvpListener() {\n  //   var parentIFrames = this.getElements(this.selectors.H5P);\n  //   if (parentIFrames.length > 0) {\n  //       parentIFrames.forEach((parentIFrame) => {\n  //           if (parentIFrame.contentDocument) {\n  //               var parentIFrameContent = parentIFrame.contentDocument || parentIFrame.contentWindow.document;\n\n  //               var nestedIFrame = parentIFrameContent.querySelector(\".h5p-iframe\");\n\n  //               if (nestedIFrame) {\n  //                   var H5P = nestedIFrame.contentWindow.H5P;\n  //                   H5P.externalDispatcher.on(\"xAPI\", this._hvpprogress.bind(this));\n  //               } else {\n  //                   setTimeout(this._hvpListener.bind(this), 100);\n  //               }\n  //           } else {\n  //               setTimeout(this._hvpListener.bind(this), 100);\n  //           }\n  //       });\n  //   }\n  // }\n\n  // _hvpprogress(event) {\n  //   window.console.log(event);\n  //   this.reactive.dispatch();\n  //   const progress = this.getElement(this.selectors.PROGRESSBARINNER);\n  //   let computedStyle = window.getComputedStyle(progress);\n  //   let width = computedStyle.width;\n  //   if (event.getVerb() === \"completed\") {\n  //     var score = event.getScore();\n  //     var maxScore = event.getMaxScore();\n  //     var percentage = (score / maxScore) * 100;\n  //     let newPercentage = width + percentage;\n  //     progress.style.width = newPercentage + \"%\";\n  //     console.log(score);\n  //     console.log(maxScore);\n  //     console.log(percentage);\n  //     console.log(newPercentage);\n  //     console.log(width);\n  //   }\n  // }\n\n  // async _showLastSectionModal(state) {\n  //   const course = state.course;\n  //   const pageItem = course.pageItem;\n  //   window.console.log(this.element.pageItem.sectionId);\n  //   const section = state.section.get(this.id);\n  //   if (section.showLastSectionModal) {\n  //     const modal = await ModalFactory.create({\n  //       type: Mooin4Modal.TYPE,\n  //       title: await getString(\n  //         \"modal_last_section_of_chapter_title\",\n  //         \"format_mooin4\"\n  //       ),\n  //       body: Templates.render(\n  //         \"format_mooin4/local/content/modals/lastsection\",\n  //         {}\n  //       ),\n  //     });\n  //     modal.show();\n  //   }\n  // }\n}\n"],"names":["Component","BaseComponent","create","descriptor","name","selectors","SECTION","SECTION_ITEM","SECTION_CMLIST","COURSE_SECTIONLIST","CM","PAGE","TOGGLER","COLLAPSE","TOGGLEALL","ACTIVITYTAG","SECTIONTAG","INDEXNUMBER","NAVIGATIONWRAPPER","NAVIGATIONTITLE","BREADCRUMB","PROGRESSBAR","PROGRESSBARINNER","COMPLETIONBUTTON","SECTIONPROGRESS","TITLEOVERLAY","classes","COLLAPSED","ACTIVITY","STATEDREADY","SCROLLUP","SCROLLDOWN","FADEOUT","ACTIVE","dettachedCms","dettachedSections","sections","cms","sectionReturn","debouncedReloads","Map","lastScroll","target","element","document","getElementById","reactive","stateReady","state","_indexContents","addEventListener","this","_sectionTogglers","toogleAll","getElement","collapseElementIds","getElements","map","id","setAttribute","join","_allSectionToggler","e","key","_refreshAllSectionsToggler","supportComponents","addActions","completeSection","mutations","CustomMutations","isEditing","sectionSetChapter","sectionUnsetChapter","addMutations","DispatchActions","setContinueSection","getContinueSection","updateSectionprogress","setLastSectionModal","reloadAllSectionPrefixes","classList","add","dispatch","forEach","section","contains","dataset","CourseEvents","manualCompletionToggled","_completionHandler","querySelector","_scrollHandler","event","sectionlink","closest","closestCollapse","isChevron","toggler","isCollapsed","sectionId","getAttribute","preventDefault","isAllCollapsed","course","get","sectionlist","getWatchers","watch","handler","_reloadCm","_refreshSectionNumber","_refreshSectionCollapsed","_startProcessing","_refreshCourseSectionlist","_refreshSectionCmlist","_reloadSection","_updateChapters","_updateSectionProgress","Error","contentcollapsed","collapsibleId","replace","collapsible","collapse","allcollapsed","allexpanded","remove","detail","undefined","cmid","completed","pageOffset","scrollTop","_titleoverlay","_dynamicHeader","navigationHeader","title","progressbarContainer","breadcrumb","removeOffset","titleHeight","offsetHeight","progressbarContainerHeight","window","innerHeight","style","transform","titleOverlay","number","sectionid","inplace","inplaceeditable","getInplaceEditable","currentvalue","getValue","currentitemid","getItemId","rawtitle","setValue","cmlist","listparent","createCm","_createCmItem","bind","_fixOrder","createSection","_createSectionItem","_scanIndex","item","Section","CmItem","selector","index","creationhandler","_item$dataset","unregister","indexed","_getDebouncedReloadCm","debouncedReload","cmId","pendingKey","pendingReload","Pending","delete","cmitem","resolve","courseActions","refreshModule","then","catch","error","debug","finally","cancel","pending","set","_cancelDebouncedReloadCm","sectionitem","refreshSection","_reloadSectionNames","isChapter","innerHTML","prefix","console","log","container","newItem","createElement","for","append","neworder","dettachedelements","createMethod","length","dndFakeActivity","itemid","currentitem","children","insertBefore","lastchild","lastChild","_lastchild$classList","removeChild","width","sectionprogress","innerText","completionbutton","disabled","text","checkMark","appendChild","currentSection","nextSection","allCompleted","isCompleted","parentChapter","Number","isFirstSectionOfChapter","_showCourseCompletedModal","_showChapterCompletedModal","modal","ModalFactory","type","Mooin4Modal","TYPE","body","Templates","render","footer","scrollable","show","showFooter"],"mappings":"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"}
